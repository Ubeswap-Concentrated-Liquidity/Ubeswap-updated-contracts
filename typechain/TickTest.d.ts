/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TickTestInterface extends ethers.utils.Interface {
  functions: {
    "clear(int24)": FunctionFragment;
    "cross(int24,uint256,uint256,uint160,int56,uint32)": FunctionFragment;
    "getInnerFeeGrowth(int24,int24,int24,uint256,uint256)": FunctionFragment;
    "setTick(int24,tuple)": FunctionFragment;
    "ticks(int24)": FunctionFragment;
    "update(int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "clear", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cross",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInnerFeeGrowth",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTick",
    values: [
      BigNumberish,
      {
        liquidityTotal: BigNumberish;
        liquidityDelta: BigNumberish;
        outerFeeGrowth0Token: BigNumberish;
        outerFeeGrowth1Token: BigNumberish;
        outerTickCumulative: BigNumberish;
        outerSecondsPerLiquidity: BigNumberish;
        outerSecondsSpent: BigNumberish;
        initialized: boolean;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;

  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cross", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInnerFeeGrowth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export class TickTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TickTestInterface;

  functions: {
    clear(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "clear(int24)"(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cross(
      tick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cross(int24,uint256,uint256,uint160,int56,uint32)"(
      tick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getInnerFeeGrowth(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      currentTick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
      }
    >;

    "getInnerFeeGrowth(int24,int24,int24,uint256,uint256)"(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      currentTick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
      }
    >;

    setTick(
      tick: BigNumberish,
      data: {
        liquidityTotal: BigNumberish;
        liquidityDelta: BigNumberish;
        outerFeeGrowth0Token: BigNumberish;
        outerFeeGrowth1Token: BigNumberish;
        outerTickCumulative: BigNumberish;
        outerSecondsPerLiquidity: BigNumberish;
        outerSecondsSpent: BigNumberish;
        initialized: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTick(int24,tuple)"(
      tick: BigNumberish,
      data: {
        liquidityTotal: BigNumberish;
        liquidityDelta: BigNumberish;
        outerFeeGrowth0Token: BigNumberish;
        outerFeeGrowth1Token: BigNumberish;
        outerTickCumulative: BigNumberish;
        outerSecondsPerLiquidity: BigNumberish;
        outerSecondsSpent: BigNumberish;
        initialized: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    "ticks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    update(
      tick: BigNumberish,
      currentTick: BigNumberish,
      liquidityDelta: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      upper: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "update(int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool)"(
      tick: BigNumberish,
      currentTick: BigNumberish,
      liquidityDelta: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      upper: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  clear(
    tick: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "clear(int24)"(
    tick: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cross(
    tick: BigNumberish,
    totalFeeGrowth0Token: BigNumberish,
    totalFeeGrowth1Token: BigNumberish,
    secondsPerLiquidityCumulative: BigNumberish,
    tickCumulative: BigNumberish,
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cross(int24,uint256,uint256,uint160,int56,uint32)"(
    tick: BigNumberish,
    totalFeeGrowth0Token: BigNumberish,
    totalFeeGrowth1Token: BigNumberish,
    secondsPerLiquidityCumulative: BigNumberish,
    tickCumulative: BigNumberish,
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getInnerFeeGrowth(
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    currentTick: BigNumberish,
    totalFeeGrowth0Token: BigNumberish,
    totalFeeGrowth1Token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      innerFeeGrowth0Token: BigNumber;
      innerFeeGrowth1Token: BigNumber;
    }
  >;

  "getInnerFeeGrowth(int24,int24,int24,uint256,uint256)"(
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    currentTick: BigNumberish,
    totalFeeGrowth0Token: BigNumberish,
    totalFeeGrowth1Token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      innerFeeGrowth0Token: BigNumber;
      innerFeeGrowth1Token: BigNumber;
    }
  >;

  setTick(
    tick: BigNumberish,
    data: {
      liquidityTotal: BigNumberish;
      liquidityDelta: BigNumberish;
      outerFeeGrowth0Token: BigNumberish;
      outerFeeGrowth1Token: BigNumberish;
      outerTickCumulative: BigNumberish;
      outerSecondsPerLiquidity: BigNumberish;
      outerSecondsSpent: BigNumberish;
      initialized: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTick(int24,tuple)"(
    tick: BigNumberish,
    data: {
      liquidityTotal: BigNumberish;
      liquidityDelta: BigNumberish;
      outerFeeGrowth0Token: BigNumberish;
      outerFeeGrowth1Token: BigNumberish;
      outerTickCumulative: BigNumberish;
      outerSecondsPerLiquidity: BigNumberish;
      outerSecondsSpent: BigNumberish;
      initialized: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ticks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      liquidityTotal: BigNumber;
      liquidityDelta: BigNumber;
      outerFeeGrowth0Token: BigNumber;
      outerFeeGrowth1Token: BigNumber;
      outerTickCumulative: BigNumber;
      outerSecondsPerLiquidity: BigNumber;
      outerSecondsSpent: number;
      initialized: boolean;
    }
  >;

  "ticks(int24)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      liquidityTotal: BigNumber;
      liquidityDelta: BigNumber;
      outerFeeGrowth0Token: BigNumber;
      outerFeeGrowth1Token: BigNumber;
      outerTickCumulative: BigNumber;
      outerSecondsPerLiquidity: BigNumber;
      outerSecondsSpent: number;
      initialized: boolean;
    }
  >;

  update(
    tick: BigNumberish,
    currentTick: BigNumberish,
    liquidityDelta: BigNumberish,
    totalFeeGrowth0Token: BigNumberish,
    totalFeeGrowth1Token: BigNumberish,
    secondsPerLiquidityCumulative: BigNumberish,
    tickCumulative: BigNumberish,
    time: BigNumberish,
    upper: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "update(int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool)"(
    tick: BigNumberish,
    currentTick: BigNumberish,
    liquidityDelta: BigNumberish,
    totalFeeGrowth0Token: BigNumberish,
    totalFeeGrowth1Token: BigNumberish,
    secondsPerLiquidityCumulative: BigNumberish,
    tickCumulative: BigNumberish,
    time: BigNumberish,
    upper: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    clear(tick: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "clear(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cross(
      tick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cross(int24,uint256,uint256,uint160,int56,uint32)"(
      tick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInnerFeeGrowth(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      currentTick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
      }
    >;

    "getInnerFeeGrowth(int24,int24,int24,uint256,uint256)"(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      currentTick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
      }
    >;

    setTick(
      tick: BigNumberish,
      data: {
        liquidityTotal: BigNumberish;
        liquidityDelta: BigNumberish;
        outerFeeGrowth0Token: BigNumberish;
        outerFeeGrowth1Token: BigNumberish;
        outerTickCumulative: BigNumberish;
        outerSecondsPerLiquidity: BigNumberish;
        outerSecondsSpent: BigNumberish;
        initialized: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setTick(int24,tuple)"(
      tick: BigNumberish,
      data: {
        liquidityTotal: BigNumberish;
        liquidityDelta: BigNumberish;
        outerFeeGrowth0Token: BigNumberish;
        outerFeeGrowth1Token: BigNumberish;
        outerTickCumulative: BigNumberish;
        outerSecondsPerLiquidity: BigNumberish;
        outerSecondsSpent: BigNumberish;
        initialized: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    "ticks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    update(
      tick: BigNumberish,
      currentTick: BigNumberish,
      liquidityDelta: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      upper: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "update(int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool)"(
      tick: BigNumberish,
      currentTick: BigNumberish,
      liquidityDelta: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      upper: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    clear(tick: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "clear(int24)"(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cross(
      tick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cross(int24,uint256,uint256,uint160,int56,uint32)"(
      tick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getInnerFeeGrowth(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      currentTick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInnerFeeGrowth(int24,int24,int24,uint256,uint256)"(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      currentTick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTick(
      tick: BigNumberish,
      data: {
        liquidityTotal: BigNumberish;
        liquidityDelta: BigNumberish;
        outerFeeGrowth0Token: BigNumberish;
        outerFeeGrowth1Token: BigNumberish;
        outerTickCumulative: BigNumberish;
        outerSecondsPerLiquidity: BigNumberish;
        outerSecondsSpent: BigNumberish;
        initialized: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTick(int24,tuple)"(
      tick: BigNumberish,
      data: {
        liquidityTotal: BigNumberish;
        liquidityDelta: BigNumberish;
        outerFeeGrowth0Token: BigNumberish;
        outerFeeGrowth1Token: BigNumberish;
        outerTickCumulative: BigNumberish;
        outerSecondsPerLiquidity: BigNumberish;
        outerSecondsSpent: BigNumberish;
        initialized: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    ticks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "ticks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      tick: BigNumberish,
      currentTick: BigNumberish,
      liquidityDelta: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      upper: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "update(int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool)"(
      tick: BigNumberish,
      currentTick: BigNumberish,
      liquidityDelta: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      upper: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clear(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "clear(int24)"(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cross(
      tick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cross(int24,uint256,uint256,uint160,int56,uint32)"(
      tick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getInnerFeeGrowth(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      currentTick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInnerFeeGrowth(int24,int24,int24,uint256,uint256)"(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      currentTick: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTick(
      tick: BigNumberish,
      data: {
        liquidityTotal: BigNumberish;
        liquidityDelta: BigNumberish;
        outerFeeGrowth0Token: BigNumberish;
        outerFeeGrowth1Token: BigNumberish;
        outerTickCumulative: BigNumberish;
        outerSecondsPerLiquidity: BigNumberish;
        outerSecondsSpent: BigNumberish;
        initialized: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTick(int24,tuple)"(
      tick: BigNumberish,
      data: {
        liquidityTotal: BigNumberish;
        liquidityDelta: BigNumberish;
        outerFeeGrowth0Token: BigNumberish;
        outerFeeGrowth1Token: BigNumberish;
        outerTickCumulative: BigNumberish;
        outerSecondsPerLiquidity: BigNumberish;
        outerSecondsSpent: BigNumberish;
        initialized: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ticks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      tick: BigNumberish,
      currentTick: BigNumberish,
      liquidityDelta: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      upper: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "update(int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool)"(
      tick: BigNumberish,
      currentTick: BigNumberish,
      liquidityDelta: BigNumberish,
      totalFeeGrowth0Token: BigNumberish,
      totalFeeGrowth1Token: BigNumberish,
      secondsPerLiquidityCumulative: BigNumberish,
      tickCumulative: BigNumberish,
      time: BigNumberish,
      upper: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
