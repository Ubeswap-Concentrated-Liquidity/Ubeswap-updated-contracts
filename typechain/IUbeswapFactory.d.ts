/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IUbeswapFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createPool(address,address)": FunctionFragment;
    "farmingAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolByPair(address,address)": FunctionFragment;
    "poolDeployer()": FunctionFragment;
    "setBaseFeeConfiguration(uint16,uint16,uint32,uint32,uint16,uint16,uint32,uint16,uint16)": FunctionFragment;
    "setFarmingAddress(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setVaultAddress(address)": FunctionFragment;
    "vaultAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "farmingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolByPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseFeeConfiguration",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFarmingAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVaultAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolByPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseFeeConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFarmingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultAddress",
    data: BytesLike
  ): Result;

  events: {
    "FarmingAddress(address)": EventFragment;
    "FeeConfiguration(uint16,uint16,uint32,uint32,uint16,uint16,uint32,uint16,uint16)": EventFragment;
    "Owner(address)": EventFragment;
    "Pool(address,address,address)": EventFragment;
    "VaultAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FarmingAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeConfiguration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Owner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultAddress"): EventFragment;
}

export class IUbeswapFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IUbeswapFactoryInterface;

  functions: {
    createPool(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPool(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    farmingAddress(overrides?: CallOverrides): Promise<[string]>;

    "farmingAddress()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    poolByPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>;

    "poolByPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>;

    poolDeployer(overrides?: CallOverrides): Promise<[string]>;

    "poolDeployer()"(overrides?: CallOverrides): Promise<[string]>;

    setBaseFeeConfiguration(
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      volumeBeta: BigNumberish,
      volumeGamma: BigNumberish,
      baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBaseFeeConfiguration(uint16,uint16,uint32,uint32,uint16,uint16,uint32,uint16,uint16)"(
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      volumeBeta: BigNumberish,
      volumeGamma: BigNumberish,
      baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFarmingAddress(
      _farmingAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFarmingAddress(address)"(
      _farmingAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVaultAddress(
      _vaultAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVaultAddress(address)"(
      _vaultAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vaultAddress(overrides?: CallOverrides): Promise<[string]>;

    "vaultAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  createPool(
    tokenA: string,
    tokenB: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPool(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  farmingAddress(overrides?: CallOverrides): Promise<string>;

  "farmingAddress()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  poolByPair(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "poolByPair(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  poolDeployer(overrides?: CallOverrides): Promise<string>;

  "poolDeployer()"(overrides?: CallOverrides): Promise<string>;

  setBaseFeeConfiguration(
    alpha1: BigNumberish,
    alpha2: BigNumberish,
    beta1: BigNumberish,
    beta2: BigNumberish,
    gamma1: BigNumberish,
    gamma2: BigNumberish,
    volumeBeta: BigNumberish,
    volumeGamma: BigNumberish,
    baseFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBaseFeeConfiguration(uint16,uint16,uint32,uint32,uint16,uint16,uint32,uint16,uint16)"(
    alpha1: BigNumberish,
    alpha2: BigNumberish,
    beta1: BigNumberish,
    beta2: BigNumberish,
    gamma1: BigNumberish,
    gamma2: BigNumberish,
    volumeBeta: BigNumberish,
    volumeGamma: BigNumberish,
    baseFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFarmingAddress(
    _farmingAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFarmingAddress(address)"(
    _farmingAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(_owner: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setOwner(address)"(
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVaultAddress(
    _vaultAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVaultAddress(address)"(
    _vaultAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vaultAddress(overrides?: CallOverrides): Promise<string>;

  "vaultAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPool(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    farmingAddress(overrides?: CallOverrides): Promise<string>;

    "farmingAddress()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolByPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "poolByPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    poolDeployer(overrides?: CallOverrides): Promise<string>;

    "poolDeployer()"(overrides?: CallOverrides): Promise<string>;

    setBaseFeeConfiguration(
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      volumeBeta: BigNumberish,
      volumeGamma: BigNumberish,
      baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBaseFeeConfiguration(uint16,uint16,uint32,uint32,uint16,uint16,uint32,uint16,uint16)"(
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      volumeBeta: BigNumberish,
      volumeGamma: BigNumberish,
      baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFarmingAddress(
      _farmingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFarmingAddress(address)"(
      _farmingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultAddress(
      _vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVaultAddress(address)"(
      _vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultAddress(overrides?: CallOverrides): Promise<string>;

    "vaultAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FarmingAddress(newFarmingAddress: string | null): EventFilter;

    FeeConfiguration(
      alpha1: null,
      alpha2: null,
      beta1: null,
      beta2: null,
      gamma1: null,
      gamma2: null,
      volumeBeta: null,
      volumeGamma: null,
      baseFee: null
    ): EventFilter;

    Owner(newOwner: string | null): EventFilter;

    Pool(token0: string | null, token1: string | null, pool: null): EventFilter;

    VaultAddress(newVaultAddress: string | null): EventFilter;
  };

  estimateGas: {
    createPool(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPool(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    farmingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "farmingAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolByPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolByPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    "poolDeployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBaseFeeConfiguration(
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      volumeBeta: BigNumberish,
      volumeGamma: BigNumberish,
      baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBaseFeeConfiguration(uint16,uint16,uint32,uint32,uint16,uint16,uint32,uint16,uint16)"(
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      volumeBeta: BigNumberish,
      volumeGamma: BigNumberish,
      baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFarmingAddress(
      _farmingAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFarmingAddress(address)"(
      _farmingAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOwner(_owner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVaultAddress(
      _vaultAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVaultAddress(address)"(
      _vaultAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "vaultAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createPool(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPool(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    farmingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmingAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolByPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolByPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolDeployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBaseFeeConfiguration(
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      volumeBeta: BigNumberish,
      volumeGamma: BigNumberish,
      baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBaseFeeConfiguration(uint16,uint16,uint32,uint32,uint16,uint16,uint32,uint16,uint16)"(
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      volumeBeta: BigNumberish,
      volumeGamma: BigNumberish,
      baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFarmingAddress(
      _farmingAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFarmingAddress(address)"(
      _farmingAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVaultAddress(
      _vaultAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVaultAddress(address)"(
      _vaultAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vaultAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vaultAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
