/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DataStorageTestInterface extends ethers.utils.Interface {
  functions: {
    "advanceTime(uint32)": FunctionFragment;
    "batchUpdate(tuple[])": FunctionFragment;
    "getAverageTick()": FunctionFragment;
    "getGasCostOfGetPoints(uint32[])": FunctionFragment;
    "getTimepoints(uint32[])": FunctionFragment;
    "index()": FunctionFragment;
    "initialize(tuple)": FunctionFragment;
    "liquidity()": FunctionFragment;
    "tick()": FunctionFragment;
    "time()": FunctionFragment;
    "timepoints(uint256)": FunctionFragment;
    "update(tuple)": FunctionFragment;
    "volatilityOnRange(uint32,int24,int24,int24,int24)": FunctionFragment;
    "window()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "advanceTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdate",
    values: [
      {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageTick",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetPoints",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimepoints",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "index", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      { time: BigNumberish; tick: BigNumberish; liquidity: BigNumberish }
    ]
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(functionFragment: "tick", values?: undefined): string;
  encodeFunctionData(functionFragment: "time", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timepoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "volatilityOnRange",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "window", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "advanceTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimepoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "index", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "time", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timepoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "volatilityOnRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "window", data: BytesLike): Result;

  events: {};
}

export class DataStorageTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DataStorageTestInterface;

  functions: {
    advanceTime(
      by: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "advanceTime(uint32)"(
      by: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    batchUpdate(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchUpdate(tuple[])"(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAverageTick(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getAverageTick()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGasCostOfGetPoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getGasCostOfGetPoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tickCumulatives: BigNumber[];
        secondsPerLiquidityCumulatives: BigNumber[];
        volatilityCumulatives: BigNumber[];
        volumePerAvgLiquiditys: BigNumber[];
      }
    >;

    "getTimepoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tickCumulatives: BigNumber[];
        secondsPerLiquidityCumulatives: BigNumber[];
        volatilityCumulatives: BigNumber[];
        volumePerAvgLiquiditys: BigNumber[];
      }
    >;

    index(overrides?: CallOverrides): Promise<[number]>;

    "index()"(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      params: {
        time: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(tuple)"(
      params: {
        time: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidity()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tick(overrides?: CallOverrides): Promise<[number]>;

    "tick()"(overrides?: CallOverrides): Promise<[number]>;

    time(overrides?: CallOverrides): Promise<[number]>;

    "time()"(overrides?: CallOverrides): Promise<[number]>;

    timepoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    "timepoints(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    update(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "update(tuple)"(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    volatilityOnRange(
      dt: BigNumberish,
      tick0: BigNumberish,
      tick1: BigNumberish,
      avgTick0: BigNumberish,
      avgTick1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "volatilityOnRange(uint32,int24,int24,int24,int24)"(
      dt: BigNumberish,
      tick0: BigNumberish,
      tick1: BigNumberish,
      avgTick0: BigNumberish,
      avgTick1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    window(overrides?: CallOverrides): Promise<[BigNumber]>;

    "window()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  advanceTime(
    by: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "advanceTime(uint32)"(
    by: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  batchUpdate(
    params: {
      advanceTimeBy: BigNumberish;
      tick: BigNumberish;
      liquidity: BigNumberish;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchUpdate(tuple[])"(
    params: {
      advanceTimeBy: BigNumberish;
      tick: BigNumberish;
      liquidity: BigNumberish;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAverageTick(overrides?: CallOverrides): Promise<BigNumber>;

  "getAverageTick()"(overrides?: CallOverrides): Promise<BigNumber>;

  getGasCostOfGetPoints(
    secondsAgos: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGasCostOfGetPoints(uint32[])"(
    secondsAgos: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimepoints(
    secondsAgos: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      tickCumulatives: BigNumber[];
      secondsPerLiquidityCumulatives: BigNumber[];
      volatilityCumulatives: BigNumber[];
      volumePerAvgLiquiditys: BigNumber[];
    }
  >;

  "getTimepoints(uint32[])"(
    secondsAgos: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      tickCumulatives: BigNumber[];
      secondsPerLiquidityCumulatives: BigNumber[];
      volatilityCumulatives: BigNumber[];
      volumePerAvgLiquiditys: BigNumber[];
    }
  >;

  index(overrides?: CallOverrides): Promise<number>;

  "index()"(overrides?: CallOverrides): Promise<number>;

  initialize(
    params: { time: BigNumberish; tick: BigNumberish; liquidity: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(tuple)"(
    params: { time: BigNumberish; tick: BigNumberish; liquidity: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  tick(overrides?: CallOverrides): Promise<number>;

  "tick()"(overrides?: CallOverrides): Promise<number>;

  time(overrides?: CallOverrides): Promise<number>;

  "time()"(overrides?: CallOverrides): Promise<number>;

  timepoints(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
      initialized: boolean;
      blockTimestamp: number;
      tickCumulative: BigNumber;
      secondsPerLiquidityCumulative: BigNumber;
      volatilityCumulative: BigNumber;
      averageTick: number;
      volumePerLiquidityCumulative: BigNumber;
    }
  >;

  "timepoints(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
      initialized: boolean;
      blockTimestamp: number;
      tickCumulative: BigNumber;
      secondsPerLiquidityCumulative: BigNumber;
      volatilityCumulative: BigNumber;
      averageTick: number;
      volumePerLiquidityCumulative: BigNumber;
    }
  >;

  update(
    params: {
      advanceTimeBy: BigNumberish;
      tick: BigNumberish;
      liquidity: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "update(tuple)"(
    params: {
      advanceTimeBy: BigNumberish;
      tick: BigNumberish;
      liquidity: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  volatilityOnRange(
    dt: BigNumberish,
    tick0: BigNumberish,
    tick1: BigNumberish,
    avgTick0: BigNumberish,
    avgTick1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "volatilityOnRange(uint32,int24,int24,int24,int24)"(
    dt: BigNumberish,
    tick0: BigNumberish,
    tick1: BigNumberish,
    avgTick0: BigNumberish,
    avgTick1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  window(overrides?: CallOverrides): Promise<BigNumber>;

  "window()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    advanceTime(by: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "advanceTime(uint32)"(
      by: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchUpdate(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchUpdate(tuple[])"(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAverageTick(overrides?: CallOverrides): Promise<BigNumber>;

    "getAverageTick()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGasCostOfGetPoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfGetPoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tickCumulatives: BigNumber[];
        secondsPerLiquidityCumulatives: BigNumber[];
        volatilityCumulatives: BigNumber[];
        volumePerAvgLiquiditys: BigNumber[];
      }
    >;

    "getTimepoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tickCumulatives: BigNumber[];
        secondsPerLiquidityCumulatives: BigNumber[];
        volatilityCumulatives: BigNumber[];
        volumePerAvgLiquiditys: BigNumber[];
      }
    >;

    index(overrides?: CallOverrides): Promise<number>;

    "index()"(overrides?: CallOverrides): Promise<number>;

    initialize(
      params: {
        time: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(tuple)"(
      params: {
        time: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    tick(overrides?: CallOverrides): Promise<number>;

    "tick()"(overrides?: CallOverrides): Promise<number>;

    time(overrides?: CallOverrides): Promise<number>;

    "time()"(overrides?: CallOverrides): Promise<number>;

    timepoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    "timepoints(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    update(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "update(tuple)"(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    volatilityOnRange(
      dt: BigNumberish,
      tick0: BigNumberish,
      tick1: BigNumberish,
      avgTick0: BigNumberish,
      avgTick1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "volatilityOnRange(uint32,int24,int24,int24,int24)"(
      dt: BigNumberish,
      tick0: BigNumberish,
      tick1: BigNumberish,
      avgTick0: BigNumberish,
      avgTick1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    window(overrides?: CallOverrides): Promise<BigNumber>;

    "window()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    advanceTime(by: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "advanceTime(uint32)"(
      by: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    batchUpdate(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchUpdate(tuple[])"(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAverageTick(overrides?: CallOverrides): Promise<BigNumber>;

    "getAverageTick()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGasCostOfGetPoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfGetPoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimepoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    index(overrides?: CallOverrides): Promise<BigNumber>;

    "index()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      params: {
        time: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(tuple)"(
      params: {
        time: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    tick(overrides?: CallOverrides): Promise<BigNumber>;

    "tick()"(overrides?: CallOverrides): Promise<BigNumber>;

    time(overrides?: CallOverrides): Promise<BigNumber>;

    "time()"(overrides?: CallOverrides): Promise<BigNumber>;

    timepoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "timepoints(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "update(tuple)"(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    volatilityOnRange(
      dt: BigNumberish,
      tick0: BigNumberish,
      tick1: BigNumberish,
      avgTick0: BigNumberish,
      avgTick1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "volatilityOnRange(uint32,int24,int24,int24,int24)"(
      dt: BigNumberish,
      tick0: BigNumberish,
      tick1: BigNumberish,
      avgTick0: BigNumberish,
      avgTick1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    window(overrides?: CallOverrides): Promise<BigNumber>;

    "window()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    advanceTime(
      by: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "advanceTime(uint32)"(
      by: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    batchUpdate(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchUpdate(tuple[])"(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAverageTick(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAverageTick()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfGetPoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGasCostOfGetPoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimepoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    index(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "index()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      params: {
        time: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(tuple)"(
      params: {
        time: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tick(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tick()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "time()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timepoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timepoints(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "update(tuple)"(
      params: {
        advanceTimeBy: BigNumberish;
        tick: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    volatilityOnRange(
      dt: BigNumberish,
      tick0: BigNumberish,
      tick1: BigNumberish,
      avgTick0: BigNumberish,
      avgTick1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "volatilityOnRange(uint32,int24,int24,int24,int24)"(
      dt: BigNumberish,
      tick0: BigNumberish,
      tick1: BigNumberish,
      avgTick0: BigNumberish,
      avgTick1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    window(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "window()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
