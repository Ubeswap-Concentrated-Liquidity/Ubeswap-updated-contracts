/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PriceMovementMathTestInterface extends ethers.utils.Interface {
  functions: {
    "getGasCostOfmovePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)": FunctionFragment;
    "movePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getGasCostOfmovePriceTowardsTarget",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "movePriceTowardsTarget",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGasCostOfmovePriceTowardsTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "movePriceTowardsTarget",
    data: BytesLike
  ): Result;

  events: {};
}

export class PriceMovementMathTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PriceMovementMathTestInterface;

  functions: {
    getGasCostOfmovePriceTowardsTarget(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getGasCostOfmovePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    movePriceTowardsTarget(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        sqrtQ: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    "movePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        sqrtQ: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        feeAmount: BigNumber;
      }
    >;
  };

  getGasCostOfmovePriceTowardsTarget(
    sqrtP: BigNumberish,
    sqrtPTarget: BigNumberish,
    liquidity: BigNumberish,
    amountRemaining: BigNumberish,
    feePips: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGasCostOfmovePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)"(
    sqrtP: BigNumberish,
    sqrtPTarget: BigNumberish,
    liquidity: BigNumberish,
    amountRemaining: BigNumberish,
    feePips: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  movePriceTowardsTarget(
    sqrtP: BigNumberish,
    sqrtPTarget: BigNumberish,
    liquidity: BigNumberish,
    amountRemaining: BigNumberish,
    feePips: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      sqrtQ: BigNumber;
      amountIn: BigNumber;
      amountOut: BigNumber;
      feeAmount: BigNumber;
    }
  >;

  "movePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)"(
    sqrtP: BigNumberish,
    sqrtPTarget: BigNumberish,
    liquidity: BigNumberish,
    amountRemaining: BigNumberish,
    feePips: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      sqrtQ: BigNumber;
      amountIn: BigNumber;
      amountOut: BigNumber;
      feeAmount: BigNumber;
    }
  >;

  callStatic: {
    getGasCostOfmovePriceTowardsTarget(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfmovePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    movePriceTowardsTarget(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        sqrtQ: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    "movePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        sqrtQ: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        feeAmount: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getGasCostOfmovePriceTowardsTarget(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfmovePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    movePriceTowardsTarget(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "movePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getGasCostOfmovePriceTowardsTarget(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGasCostOfmovePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    movePriceTowardsTarget(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "movePriceTowardsTarget(uint160,uint160,uint128,int256,uint16)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
