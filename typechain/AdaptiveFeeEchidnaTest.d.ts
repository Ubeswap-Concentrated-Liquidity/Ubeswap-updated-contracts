/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AdaptiveFeeEchidnaTestInterface extends ethers.utils.Interface {
  functions: {
    "expInvariants(uint256,uint16)": FunctionFragment;
    "getFeeInvariants(uint88,uint256,uint16,uint16,uint16,uint16,uint32,uint32,uint16,uint32,uint16)": FunctionFragment;
    "sigmoidInvariants(uint256,uint16,uint16,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "expInvariants",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeInvariants",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sigmoidInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "expInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sigmoidInvariants",
    data: BytesLike
  ): Result;

  events: {};
}

export class AdaptiveFeeEchidnaTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AdaptiveFeeEchidnaTestInterface;

  functions: {
    expInvariants(
      x: BigNumberish,
      gamma: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "expInvariants(uint256,uint16)"(
      x: BigNumberish,
      gamma: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getFeeInvariants(
      volatility: BigNumberish,
      volumePerLiquidity: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      volumeGamma: BigNumberish,
      volumeBeta: BigNumberish,
      baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    "getFeeInvariants(uint88,uint256,uint16,uint16,uint16,uint16,uint32,uint32,uint16,uint32,uint16)"(
      volatility: BigNumberish,
      volumePerLiquidity: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      volumeGamma: BigNumberish,
      volumeBeta: BigNumberish,
      baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    sigmoidInvariants(
      x: BigNumberish,
      gamma: BigNumberish,
      alpha: BigNumberish,
      beta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "sigmoidInvariants(uint256,uint16,uint16,uint256)"(
      x: BigNumberish,
      gamma: BigNumberish,
      alpha: BigNumberish,
      beta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  expInvariants(
    x: BigNumberish,
    gamma: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "expInvariants(uint256,uint16)"(
    x: BigNumberish,
    gamma: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getFeeInvariants(
    volatility: BigNumberish,
    volumePerLiquidity: BigNumberish,
    gamma1: BigNumberish,
    gamma2: BigNumberish,
    alpha1: BigNumberish,
    alpha2: BigNumberish,
    beta1: BigNumberish,
    beta2: BigNumberish,
    volumeGamma: BigNumberish,
    volumeBeta: BigNumberish,
    baseFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFeeInvariants(uint88,uint256,uint16,uint16,uint16,uint16,uint32,uint32,uint16,uint32,uint16)"(
    volatility: BigNumberish,
    volumePerLiquidity: BigNumberish,
    gamma1: BigNumberish,
    gamma2: BigNumberish,
    alpha1: BigNumberish,
    alpha2: BigNumberish,
    beta1: BigNumberish,
    beta2: BigNumberish,
    volumeGamma: BigNumberish,
    volumeBeta: BigNumberish,
    baseFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sigmoidInvariants(
    x: BigNumberish,
    gamma: BigNumberish,
    alpha: BigNumberish,
    beta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "sigmoidInvariants(uint256,uint16,uint16,uint256)"(
    x: BigNumberish,
    gamma: BigNumberish,
    alpha: BigNumberish,
    beta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    expInvariants(
      x: BigNumberish,
      gamma: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "expInvariants(uint256,uint16)"(
      x: BigNumberish,
      gamma: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getFeeInvariants(
      volatility: BigNumberish,
      volumePerLiquidity: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      volumeGamma: BigNumberish,
      volumeBeta: BigNumberish,
      baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFeeInvariants(uint88,uint256,uint16,uint16,uint16,uint16,uint32,uint32,uint16,uint32,uint16)"(
      volatility: BigNumberish,
      volumePerLiquidity: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      volumeGamma: BigNumberish,
      volumeBeta: BigNumberish,
      baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sigmoidInvariants(
      x: BigNumberish,
      gamma: BigNumberish,
      alpha: BigNumberish,
      beta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sigmoidInvariants(uint256,uint16,uint16,uint256)"(
      x: BigNumberish,
      gamma: BigNumberish,
      alpha: BigNumberish,
      beta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    expInvariants(
      x: BigNumberish,
      gamma: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "expInvariants(uint256,uint16)"(
      x: BigNumberish,
      gamma: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeInvariants(
      volatility: BigNumberish,
      volumePerLiquidity: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      volumeGamma: BigNumberish,
      volumeBeta: BigNumberish,
      baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFeeInvariants(uint88,uint256,uint16,uint16,uint16,uint16,uint32,uint32,uint16,uint32,uint16)"(
      volatility: BigNumberish,
      volumePerLiquidity: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      volumeGamma: BigNumberish,
      volumeBeta: BigNumberish,
      baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sigmoidInvariants(
      x: BigNumberish,
      gamma: BigNumberish,
      alpha: BigNumberish,
      beta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sigmoidInvariants(uint256,uint16,uint16,uint256)"(
      x: BigNumberish,
      gamma: BigNumberish,
      alpha: BigNumberish,
      beta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    expInvariants(
      x: BigNumberish,
      gamma: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "expInvariants(uint256,uint16)"(
      x: BigNumberish,
      gamma: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeInvariants(
      volatility: BigNumberish,
      volumePerLiquidity: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      volumeGamma: BigNumberish,
      volumeBeta: BigNumberish,
      baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFeeInvariants(uint88,uint256,uint16,uint16,uint16,uint16,uint32,uint32,uint16,uint32,uint16)"(
      volatility: BigNumberish,
      volumePerLiquidity: BigNumberish,
      gamma1: BigNumberish,
      gamma2: BigNumberish,
      alpha1: BigNumberish,
      alpha2: BigNumberish,
      beta1: BigNumberish,
      beta2: BigNumberish,
      volumeGamma: BigNumberish,
      volumeBeta: BigNumberish,
      baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sigmoidInvariants(
      x: BigNumberish,
      gamma: BigNumberish,
      alpha: BigNumberish,
      beta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sigmoidInvariants(uint256,uint16,uint16,uint256)"(
      x: BigNumberish,
      gamma: BigNumberish,
      alpha: BigNumberish,
      beta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
