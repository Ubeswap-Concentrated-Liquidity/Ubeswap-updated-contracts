/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TickTest } from "../TickTest";

export class TickTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TickTest> {
    return super.deploy(overrides || {}) as Promise<TickTest>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickTest {
    return super.attach(address) as TickTest;
  }
  connect(signer: Signer): TickTest__factory {
    return super.connect(signer) as TickTest__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickTest {
    return new Contract(address, _abi, signerOrProvider) as TickTest;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "clear",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "totalFeeGrowth0Token",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalFeeGrowth1Token",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulative",
        type: "uint160",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint32",
        name: "time",
        type: "uint32",
      },
    ],
    name: "cross",
    outputs: [
      {
        internalType: "int128",
        name: "liquidityDelta",
        type: "int128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "bottomTick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "topTick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "currentTick",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "totalFeeGrowth0Token",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalFeeGrowth1Token",
        type: "uint256",
      },
    ],
    name: "getInnerFeeGrowth",
    outputs: [
      {
        internalType: "uint256",
        name: "innerFeeGrowth0Token",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "innerFeeGrowth1Token",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "liquidityTotal",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "liquidityDelta",
            type: "int128",
          },
          {
            internalType: "uint256",
            name: "outerFeeGrowth0Token",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "outerFeeGrowth1Token",
            type: "uint256",
          },
          {
            internalType: "int56",
            name: "outerTickCumulative",
            type: "int56",
          },
          {
            internalType: "uint160",
            name: "outerSecondsPerLiquidity",
            type: "uint160",
          },
          {
            internalType: "uint32",
            name: "outerSecondsSpent",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "initialized",
            type: "bool",
          },
        ],
        internalType: "struct TickManager.Tick",
        name: "data",
        type: "tuple",
      },
    ],
    name: "setTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    name: "ticks",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidityTotal",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "liquidityDelta",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "outerFeeGrowth0Token",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "outerFeeGrowth1Token",
        type: "uint256",
      },
      {
        internalType: "int56",
        name: "outerTickCumulative",
        type: "int56",
      },
      {
        internalType: "uint160",
        name: "outerSecondsPerLiquidity",
        type: "uint160",
      },
      {
        internalType: "uint32",
        name: "outerSecondsSpent",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "initialized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "currentTick",
        type: "int24",
      },
      {
        internalType: "int128",
        name: "liquidityDelta",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "totalFeeGrowth0Token",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalFeeGrowth1Token",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulative",
        type: "uint160",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint32",
        name: "time",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "upper",
        type: "bool",
      },
    ],
    name: "update",
    outputs: [
      {
        internalType: "bool",
        name: "flipped",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061122b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063484f52ab146100675780635cb083ce14610097578063b613524a146100b3578063d4c48461146100cf578063df33fa8814610100578063f30dba9314610130575b600080fd5b610081600480360381019061007c9190610d38565b610167565b60405161008e9190610fa4565b60405180910390f35b6100b160048036038101906100ac9190610e75565b61019c565b005b6100cd60048036038101906100c89190610d0f565b61030f565b005b6100e960048036038101906100e49190610dfe565b6103ef565b6040516100f7929190611058565b60405180910390f35b61011a60048036038101906101159190610eb2565b61041c565b6040516101279190610fbf565b60405180910390f35b61014a60048036038101906101459190610d0f565b610448565b60405161015e989796959493929190610fda565b60405180910390f35b600061018d8a8a8a8a8a8a8a8a8a6000610503909998979695949392919063ffffffff16565b90509998505050505050505050565b806000808460020b60020b815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff160217905550604082015181600101556060820151816002015560808201518160030160006101000a81548166ffffffffffffff021916908360060b66ffffffffffffff16021790555060a08201518160030160076101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c082015181600301601b6101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600301601f6101000a81548160ff0219169083151502179055509050505050565b6000808260020b60020b8152602001908152602001600020600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160006101000a81549066ffffffffffffff02191690556003820160076101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201601b6101000a81549063ffffffff021916905560038201601f6101000a81549060ff0219169055505050565b60008061040e878787878760006107f29095949392919063ffffffff16565b915091509550959350505050565b600061043c87878787878760006108ad909695949392919063ffffffff16565b90509695505050505050565b60006020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a9004600f0b908060010154908060020154908060030160009054906101000a900460060b908060030160079054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600301601b9054906101000a900463ffffffff169080600301601f9054906101000a900460ff16905088565b6000808b60008c60020b60020b8152602001908152602001600020905060008160000160109054906101000a9004600f0b905060008260000160009054906101000a90046fffffffffffffffffffffffffffffffff1690506000610567828d6109e9565b905060016e023746e6a58dcb13d4af821b93f062016fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1610610614576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f4c4f00000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8561063f5761063a6106358d600f0b85600f0b610b4290919063ffffffff16565b610b65565b610661565b61066061065b8d600f0b85600f0b610b7e90919063ffffffff16565b610b65565b5b8460000160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff160217905550808460000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506000816fffffffffffffffffffffffffffffffff161494506000826fffffffffffffffffffffffffffffffff1614156107e057841594508c60020b8e60020b136107c2578a8460010181905550898460020181905550888460030160076101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550878460030160006101000a81548166ffffffffffffff021916908360060b66ffffffffffffff1602179055508684600301601b6101000a81548163ffffffff021916908363ffffffff1602179055505b600184600301601f6101000a81548160ff0219169083151502179055505b505050509a9950505050505050505050565b60008060008860008960020b60020b8152602001908152602001600020905060008960008960020b60020b815260200190815260200160002090508760020b8760020b1215610885578860020b8760020b1261085f5781600101548603935081600201548503925061086e565b81600101549350816002015492505b8060010154840393508060020154830392506108a0565b81600101548160010154039350816002015481600201540392505b5050965096945050505050565b6000808860008960020b60020b8152602001908152602001600020905080600301601b9054906101000a900463ffffffff16830381600301601b6101000a81548163ffffffff021916908363ffffffff1602179055508060030160079054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685038160030160076101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060030160009054906101000a900460060b84038160030160006101000a81548166ffffffffffffff021916908360060b66ffffffffffffff1602179055508060020154860381600201819055508060010154870381600101819055508060000160109054906101000a9004600f0b915050979650505050505050565b60008082600f0b1215610a9c57826fffffffffffffffffffffffffffffffff168260000384039150816fffffffffffffffffffffffffffffffff1610610a97576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f4c5300000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610b3c565b826fffffffffffffffffffffffffffffffff168284019150816fffffffffffffffffffffffffffffffff161015610b3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f4c4100000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b92915050565b6000808212151515838385019250821215151514610b5f57600080fd5b92915050565b60008182915081600f0b14610b7957600080fd5b919050565b6000808212151515838385039250821315151514610b9b57600080fd5b92915050565b600081359050610bb08161113d565b92915050565b600081359050610bc581611154565b92915050565b600081359050610bda8161116b565b92915050565b600081359050610bef81611182565b92915050565b60006101008284031215610c0857600080fd5b610c13610100611081565b90506000610c2384828501610cbb565b6000830152506020610c3784828501610bb6565b6020830152506040610c4b84828501610ce5565b6040830152506060610c5f84828501610ce5565b6060830152506080610c7384828501610be0565b60808301525060a0610c8784828501610cd0565b60a08301525060c0610c9b84828501610cfa565b60c08301525060e0610caf84828501610ba1565b60e08301525092915050565b600081359050610cca81611199565b92915050565b600081359050610cdf816111b0565b92915050565b600081359050610cf4816111c7565b92915050565b600081359050610d09816111de565b92915050565b600060208284031215610d2157600080fd5b6000610d2f84828501610bcb565b91505092915050565b60008060008060008060008060006101208a8c031215610d5757600080fd5b6000610d658c828d01610bcb565b9950506020610d768c828d01610bcb565b9850506040610d878c828d01610bb6565b9750506060610d988c828d01610ce5565b9650506080610da98c828d01610ce5565b95505060a0610dba8c828d01610cd0565b94505060c0610dcb8c828d01610be0565b93505060e0610ddc8c828d01610cfa565b925050610100610dee8c828d01610ba1565b9150509295985092959850929598565b600080600080600060a08688031215610e1657600080fd5b6000610e2488828901610bcb565b9550506020610e3588828901610bcb565b9450506040610e4688828901610bcb565b9350506060610e5788828901610ce5565b9250506080610e6888828901610ce5565b9150509295509295909350565b6000806101208385031215610e8957600080fd5b6000610e9785828601610bcb565b9250506020610ea885828601610bf5565b9150509250929050565b60008060008060008060c08789031215610ecb57600080fd5b6000610ed989828a01610bcb565b9650506020610eea89828a01610ce5565b9550506040610efb89828a01610ce5565b9450506060610f0c89828a01610cd0565b9350506080610f1d89828a01610be0565b92505060a0610f2e89828a01610cfa565b9150509295509295509295565b610f44816110b2565b82525050565b610f53816110be565b82525050565b610f62816110d8565b82525050565b610f71816110e5565b82525050565b610f8081611101565b82525050565b610f8f81611121565b82525050565b610f9e8161112b565b82525050565b6000602082019050610fb96000830184610f3b565b92915050565b6000602082019050610fd46000830184610f4a565b92915050565b600061010082019050610ff0600083018b610f68565b610ffd602083018a610f4a565b61100a6040830189610f86565b6110176060830188610f86565b6110246080830187610f59565b61103160a0830186610f77565b61103e60c0830185610f95565b61104b60e0830184610f3b565b9998505050505050505050565b600060408201905061106d6000830185610f86565b61107a6020830184610f86565b9392505050565b6000604051905081810181811067ffffffffffffffff821117156110a8576110a761113b565b5b8060405250919050565b60008115159050919050565b600081600f0b9050919050565b60008160020b9050919050565b60008160060b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565bfe5b611146816110b2565b811461115157600080fd5b50565b61115d816110be565b811461116857600080fd5b50565b611174816110cb565b811461117f57600080fd5b50565b61118b816110d8565b811461119657600080fd5b50565b6111a2816110e5565b81146111ad57600080fd5b50565b6111b981611101565b81146111c457600080fd5b50565b6111d081611121565b81146111db57600080fd5b50565b6111e78161112b565b81146111f257600080fd5b5056fea2646970667358221220ca1c7fbd5c9c201b83330ba889c702f99c0dd3f2b3ef58a7c5c167bddd601ff564736f6c63430007060033";
