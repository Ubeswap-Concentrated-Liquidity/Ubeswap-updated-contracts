/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockTimeUbeswapPoolDeployerInterface extends ethers.utils.Interface {
  functions: {
    "deployMock(address,address,address)": FunctionFragment;
    "parameters()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployMock",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parameters",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deployMock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;

  events: {
    "PoolDeployed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolDeployed"): EventFragment;
}

export class MockTimeUbeswapPoolDeployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockTimeUbeswapPoolDeployerInterface;

  functions: {
    deployMock(
      factory: string,
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployMock(address,address,address)"(
      factory: string,
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    parameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        dataStorage: string;
        factory: string;
        token0: string;
        token1: string;
      }
    >;

    "parameters()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        dataStorage: string;
        factory: string;
        token0: string;
        token1: string;
      }
    >;
  };

  deployMock(
    factory: string,
    token0: string,
    token1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployMock(address,address,address)"(
    factory: string,
    token0: string,
    token1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  parameters(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      dataStorage: string;
      factory: string;
      token0: string;
      token1: string;
    }
  >;

  "parameters()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      dataStorage: string;
      factory: string;
      token0: string;
      token1: string;
    }
  >;

  callStatic: {
    deployMock(
      factory: string,
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployMock(address,address,address)"(
      factory: string,
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    parameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        dataStorage: string;
        factory: string;
        token0: string;
        token1: string;
      }
    >;

    "parameters()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        dataStorage: string;
        factory: string;
        token0: string;
        token1: string;
      }
    >;
  };

  filters: {
    PoolDeployed(pool: null): EventFilter;
  };

  estimateGas: {
    deployMock(
      factory: string,
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployMock(address,address,address)"(
      factory: string,
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    parameters(overrides?: CallOverrides): Promise<BigNumber>;

    "parameters()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployMock(
      factory: string,
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployMock(address,address,address)"(
      factory: string,
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    parameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "parameters()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
