/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IUbeswapPoolDerivedStateInterface extends ethers.utils.Interface {
  functions: {
    "getInnerCumulatives(int24,int24)": FunctionFragment;
    "getTimepoints(uint32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getInnerCumulatives",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimepoints",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getInnerCumulatives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimepoints",
    data: BytesLike
  ): Result;

  events: {};
}

export class IUbeswapPoolDerivedState extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IUbeswapPoolDerivedStateInterface;

  functions: {
    getInnerCumulatives(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        innerTickCumulative: BigNumber;
        innerSecondsSpentPerLiquidity: BigNumber;
        innerSecondsSpent: number;
      }
    >;

    "getInnerCumulatives(int24,int24)"(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        innerTickCumulative: BigNumber;
        innerSecondsSpentPerLiquidity: BigNumber;
        innerSecondsSpent: number;
      }
    >;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tickCumulatives: BigNumber[];
        secondsPerLiquidityCumulatives: BigNumber[];
        volatilityCumulatives: BigNumber[];
        volumePerAvgLiquiditys: BigNumber[];
      }
    >;

    "getTimepoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tickCumulatives: BigNumber[];
        secondsPerLiquidityCumulatives: BigNumber[];
        volatilityCumulatives: BigNumber[];
        volumePerAvgLiquiditys: BigNumber[];
      }
    >;
  };

  getInnerCumulatives(
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      innerTickCumulative: BigNumber;
      innerSecondsSpentPerLiquidity: BigNumber;
      innerSecondsSpent: number;
    }
  >;

  "getInnerCumulatives(int24,int24)"(
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      innerTickCumulative: BigNumber;
      innerSecondsSpentPerLiquidity: BigNumber;
      innerSecondsSpent: number;
    }
  >;

  getTimepoints(
    secondsAgos: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      tickCumulatives: BigNumber[];
      secondsPerLiquidityCumulatives: BigNumber[];
      volatilityCumulatives: BigNumber[];
      volumePerAvgLiquiditys: BigNumber[];
    }
  >;

  "getTimepoints(uint32[])"(
    secondsAgos: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      tickCumulatives: BigNumber[];
      secondsPerLiquidityCumulatives: BigNumber[];
      volatilityCumulatives: BigNumber[];
      volumePerAvgLiquiditys: BigNumber[];
    }
  >;

  callStatic: {
    getInnerCumulatives(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        innerTickCumulative: BigNumber;
        innerSecondsSpentPerLiquidity: BigNumber;
        innerSecondsSpent: number;
      }
    >;

    "getInnerCumulatives(int24,int24)"(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        innerTickCumulative: BigNumber;
        innerSecondsSpentPerLiquidity: BigNumber;
        innerSecondsSpent: number;
      }
    >;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tickCumulatives: BigNumber[];
        secondsPerLiquidityCumulatives: BigNumber[];
        volatilityCumulatives: BigNumber[];
        volumePerAvgLiquiditys: BigNumber[];
      }
    >;

    "getTimepoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tickCumulatives: BigNumber[];
        secondsPerLiquidityCumulatives: BigNumber[];
        volatilityCumulatives: BigNumber[];
        volumePerAvgLiquiditys: BigNumber[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    getInnerCumulatives(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInnerCumulatives(int24,int24)"(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimepoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getInnerCumulatives(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInnerCumulatives(int24,int24)"(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimepoints(uint32[])"(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
