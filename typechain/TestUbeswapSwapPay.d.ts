/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestUbeswapSwapPayInterface extends ethers.utils.Interface {
  functions: {
    "mint(address,address,int24,int24,uint128,uint256,uint256)": FunctionFragment;
    "swap(address,address,bool,uint160,int256,uint256,uint256)": FunctionFragment;
    "swapSupportingFee(address,address,bool,uint160,int256,uint256,uint256)": FunctionFragment;
    "ubeswapMintCallback(uint256,uint256,bytes)": FunctionFragment;
    "ubeswapSwapCallback(int256,int256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mint",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSupportingFee",
    values: [
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ubeswapMintCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ubeswapSwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapSupportingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ubeswapMintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ubeswapSwapCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestUbeswapSwapPay extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestUbeswapSwapPayInterface;

  functions: {
    mint(
      pool: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,address,int24,int24,uint128,uint256,uint256)"(
      pool: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swap(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(address,address,bool,uint160,int256,uint256,uint256)"(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapSupportingFee(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapSupportingFee(address,address,bool,uint160,int256,uint256,uint256)"(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ubeswapMintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ubeswapMintCallback(uint256,uint256,bytes)"(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ubeswapSwapCallback(
      arg0: BigNumberish,
      arg1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ubeswapSwapCallback(int256,int256,bytes)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  mint(
    pool: string,
    recipient: string,
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    amount: BigNumberish,
    pay0: BigNumberish,
    pay1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,address,int24,int24,uint128,uint256,uint256)"(
    pool: string,
    recipient: string,
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    amount: BigNumberish,
    pay0: BigNumberish,
    pay1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swap(
    pool: string,
    recipient: string,
    zeroToOne: boolean,
    price: BigNumberish,
    amountSpecified: BigNumberish,
    pay0: BigNumberish,
    pay1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(address,address,bool,uint160,int256,uint256,uint256)"(
    pool: string,
    recipient: string,
    zeroToOne: boolean,
    price: BigNumberish,
    amountSpecified: BigNumberish,
    pay0: BigNumberish,
    pay1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapSupportingFee(
    pool: string,
    recipient: string,
    zeroToOne: boolean,
    price: BigNumberish,
    amountSpecified: BigNumberish,
    pay0: BigNumberish,
    pay1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapSupportingFee(address,address,bool,uint160,int256,uint256,uint256)"(
    pool: string,
    recipient: string,
    zeroToOne: boolean,
    price: BigNumberish,
    amountSpecified: BigNumberish,
    pay0: BigNumberish,
    pay1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ubeswapMintCallback(
    amount0Owed: BigNumberish,
    amount1Owed: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ubeswapMintCallback(uint256,uint256,bytes)"(
    amount0Owed: BigNumberish,
    amount1Owed: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ubeswapSwapCallback(
    arg0: BigNumberish,
    arg1: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ubeswapSwapCallback(int256,int256,bytes)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    mint(
      pool: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0Owed: BigNumber;
        amount1Owed: BigNumber;
        resultLiquidity: BigNumber;
      }
    >;

    "mint(address,address,int24,int24,uint128,uint256,uint256)"(
      pool: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0Owed: BigNumber;
        amount1Owed: BigNumber;
        resultLiquidity: BigNumber;
      }
    >;

    swap(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swap(address,address,bool,uint160,int256,uint256,uint256)"(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapSupportingFee(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapSupportingFee(address,address,bool,uint160,int256,uint256,uint256)"(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ubeswapMintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "ubeswapMintCallback(uint256,uint256,bytes)"(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ubeswapSwapCallback(
      arg0: BigNumberish,
      arg1: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "ubeswapSwapCallback(int256,int256,bytes)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    mint(
      pool: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,address,int24,int24,uint128,uint256,uint256)"(
      pool: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swap(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swap(address,address,bool,uint160,int256,uint256,uint256)"(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapSupportingFee(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapSupportingFee(address,address,bool,uint160,int256,uint256,uint256)"(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ubeswapMintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ubeswapMintCallback(uint256,uint256,bytes)"(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ubeswapSwapCallback(
      arg0: BigNumberish,
      arg1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ubeswapSwapCallback(int256,int256,bytes)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mint(
      pool: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,address,int24,int24,uint128,uint256,uint256)"(
      pool: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swap(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(address,address,bool,uint160,int256,uint256,uint256)"(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapSupportingFee(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapSupportingFee(address,address,bool,uint160,int256,uint256,uint256)"(
      pool: string,
      recipient: string,
      zeroToOne: boolean,
      price: BigNumberish,
      amountSpecified: BigNumberish,
      pay0: BigNumberish,
      pay1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ubeswapMintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ubeswapMintCallback(uint256,uint256,bytes)"(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ubeswapSwapCallback(
      arg0: BigNumberish,
      arg1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ubeswapSwapCallback(int256,int256,bytes)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
