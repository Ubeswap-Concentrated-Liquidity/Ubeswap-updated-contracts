/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PoolStateInterface extends ethers.utils.Interface {
  functions: {
    "activeIncentive()": FunctionFragment;
    "globalState()": FunctionFragment;
    "liquidity()": FunctionFragment;
    "liquidityCooldown()": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "tickTable(int16)": FunctionFragment;
    "ticks(int24)": FunctionFragment;
    "timepoints(uint256)": FunctionFragment;
    "totalFeeGrowth0Token()": FunctionFragment;
    "totalFeeGrowth1Token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tickTable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "timepoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth0Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth1Token",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activeIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tickTable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timepoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth0Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth1Token",
    data: BytesLike
  ): Result;

  events: {};
}

export class PoolState extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PoolStateInterface;

  functions: {
    activeIncentive(overrides?: CallOverrides): Promise<[string]>;

    "activeIncentive()"(overrides?: CallOverrides): Promise<[string]>;

    globalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, boolean] & {
        price: BigNumber;
        tick: number;
        fee: number;
        timepointIndex: number;
        communityFeeToken0: number;
        communityFeeToken1: number;
        unlocked: boolean;
      }
    >;

    "globalState()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, boolean] & {
        price: BigNumber;
        tick: number;
        fee: number;
        timepointIndex: number;
        communityFeeToken0: number;
        communityFeeToken1: number;
        unlocked: boolean;
      }
    >;

    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidity()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityCooldown(overrides?: CallOverrides): Promise<[number]>;

    "liquidityCooldown()"(overrides?: CallOverrides): Promise<[number]>;

    positions(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityAmount: BigNumber;
        lastLiquidityAddTimestamp: number;
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
      }
    >;

    "positions(bytes32)"(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityAmount: BigNumber;
        lastLiquidityAddTimestamp: number;
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
      }
    >;

    tickTable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tickTable(int16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    "ticks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    "timepoints(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalFeeGrowth0Token()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalFeeGrowth1Token()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  activeIncentive(overrides?: CallOverrides): Promise<string>;

  "activeIncentive()"(overrides?: CallOverrides): Promise<string>;

  globalState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, number, boolean] & {
      price: BigNumber;
      tick: number;
      fee: number;
      timepointIndex: number;
      communityFeeToken0: number;
      communityFeeToken1: number;
      unlocked: boolean;
    }
  >;

  "globalState()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, number, boolean] & {
      price: BigNumber;
      tick: number;
      fee: number;
      timepointIndex: number;
      communityFeeToken0: number;
      communityFeeToken1: number;
      unlocked: boolean;
    }
  >;

  liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityCooldown(overrides?: CallOverrides): Promise<number>;

  "liquidityCooldown()"(overrides?: CallOverrides): Promise<number>;

  positions(
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidityAmount: BigNumber;
      lastLiquidityAddTimestamp: number;
      innerFeeGrowth0Token: BigNumber;
      innerFeeGrowth1Token: BigNumber;
      fees0: BigNumber;
      fees1: BigNumber;
    }
  >;

  "positions(bytes32)"(
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidityAmount: BigNumber;
      lastLiquidityAddTimestamp: number;
      innerFeeGrowth0Token: BigNumber;
      innerFeeGrowth1Token: BigNumber;
      fees0: BigNumber;
      fees1: BigNumber;
    }
  >;

  tickTable(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "tickTable(int16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ticks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      liquidityTotal: BigNumber;
      liquidityDelta: BigNumber;
      outerFeeGrowth0Token: BigNumber;
      outerFeeGrowth1Token: BigNumber;
      outerTickCumulative: BigNumber;
      outerSecondsPerLiquidity: BigNumber;
      outerSecondsSpent: number;
      initialized: boolean;
    }
  >;

  "ticks(int24)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      liquidityTotal: BigNumber;
      liquidityDelta: BigNumber;
      outerFeeGrowth0Token: BigNumber;
      outerFeeGrowth1Token: BigNumber;
      outerTickCumulative: BigNumber;
      outerSecondsPerLiquidity: BigNumber;
      outerSecondsSpent: number;
      initialized: boolean;
    }
  >;

  timepoints(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
      initialized: boolean;
      blockTimestamp: number;
      tickCumulative: BigNumber;
      secondsPerLiquidityCumulative: BigNumber;
      volatilityCumulative: BigNumber;
      averageTick: number;
      volumePerLiquidityCumulative: BigNumber;
    }
  >;

  "timepoints(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
      initialized: boolean;
      blockTimestamp: number;
      tickCumulative: BigNumber;
      secondsPerLiquidityCumulative: BigNumber;
      volatilityCumulative: BigNumber;
      averageTick: number;
      volumePerLiquidityCumulative: BigNumber;
    }
  >;

  totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

  "totalFeeGrowth0Token()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;

  "totalFeeGrowth1Token()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    activeIncentive(overrides?: CallOverrides): Promise<string>;

    "activeIncentive()"(overrides?: CallOverrides): Promise<string>;

    globalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, boolean] & {
        price: BigNumber;
        tick: number;
        fee: number;
        timepointIndex: number;
        communityFeeToken0: number;
        communityFeeToken1: number;
        unlocked: boolean;
      }
    >;

    "globalState()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, boolean] & {
        price: BigNumber;
        tick: number;
        fee: number;
        timepointIndex: number;
        communityFeeToken0: number;
        communityFeeToken1: number;
        unlocked: boolean;
      }
    >;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityCooldown(overrides?: CallOverrides): Promise<number>;

    "liquidityCooldown()"(overrides?: CallOverrides): Promise<number>;

    positions(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityAmount: BigNumber;
        lastLiquidityAddTimestamp: number;
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
      }
    >;

    "positions(bytes32)"(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityAmount: BigNumber;
        lastLiquidityAddTimestamp: number;
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
      }
    >;

    tickTable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tickTable(int16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    "ticks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    "timepoints(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFeeGrowth0Token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFeeGrowth1Token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    activeIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    "activeIncentive()"(overrides?: CallOverrides): Promise<BigNumber>;

    globalState(overrides?: CallOverrides): Promise<BigNumber>;

    "globalState()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityCooldown()"(overrides?: CallOverrides): Promise<BigNumber>;

    positions(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "positions(bytes32)"(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickTable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tickTable(int16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "ticks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "timepoints(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFeeGrowth0Token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFeeGrowth1Token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activeIncentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "activeIncentive()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "globalState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidityCooldown()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positions(bytes32)"(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickTable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tickTable(int16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ticks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timepoints(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFeeGrowth0Token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalFeeGrowth0Token()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFeeGrowth1Token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalFeeGrowth1Token()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
